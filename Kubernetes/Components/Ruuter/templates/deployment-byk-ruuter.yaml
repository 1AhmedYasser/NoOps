apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.release_name }}"
spec:
  selector:
    matchLabels:
      app: "{{ .Values.release_name }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.release_name }}"
    spec:
      containers:
        - name: "{{ .Values.release_name }}"
          image: "{{ .Values.images.scope.registry }}/{{ .Values.images.scope.repository }}:{{ .Values.images.scope.tag }}"
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: logging.level.root
              value: "{{ .Values.env.LOGGING_LEVEL_ROOT}}"
            - name: LOG_LEVEL_TIMING
              value: "{{ .Values.env.LOG_LEVEL_TIMING}}"
            - name: application.logging.displayRequestContent
              value: "{{ .Values.env.APPLICATION_LOGGING_DISPLAY_REQUEST_CONTENT}}"
            - name: application.logging.displayResponseContent
              value: "{{ .Values.env.APPLICATION_LOGGING_DISPLAY_RESPONSE_CONTENT}}"
          volumeMounts:
            - name: urls-env
              mountPath: /app/constants.ini
              subPath: constants.ini
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
      volumes:
        - name: dsl
          emptyDir: {}
        - name: urls-env
          configMap:
            name: urls-env-config
        - name: byk-dsl-services
          persistentVolumeClaim:
            claimName: byk-dsl-services
